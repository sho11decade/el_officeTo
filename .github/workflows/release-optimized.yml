name: Build and Release (Optimized)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  ELECTRON_CACHE: .electron
  ELECTRON_BUILDER_CACHE: .cache/electron-builder

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Python and Build Tools
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install build tools (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        npm config set msvs_version 2022
        npm config set python python
        
    - name: Install build tools (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        python -m pip install --upgrade pip
        
    - name: Install build tools (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3-dev
        
    - name: Cache Electron binaries
      uses: actions/cache@v3
      with:
        path: |
          .electron
          .cache
          ~/.cache/electron
          ~/AppData/Local/electron/Cache
        key: ${{ runner.os }}-electron-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-electron-
          
    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Clean installation (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        npm cache clean --force
        if (Test-Path node_modules) { Remove-Item -Recurse -Force node_modules }
        if (Test-Path package-lock.json) { Remove-Item -Force package-lock.json }
        
    - name: Clean installation (macOS/Linux)
      if: matrix.os != 'windows-latest'
      run: |
        npm cache clean --force
        rm -rf node_modules package-lock.json || true
        
    - name: Install dependencies
      run: |
        npm install
        
    - name: Setup Sharp (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $env:npm_config_sharp_binary_host = "https://github.com/lovell/sharp-libvips/releases/download/"
        $env:npm_config_sharp_ignore_global_libvips = "true"
        npm install --platform=win32 --arch=x64 sharp --force
        
    - name: Setup Sharp (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        export npm_config_sharp_binary_host="https://github.com/lovell/sharp-libvips/releases/download/"
        export npm_config_sharp_ignore_global_libvips="true"
        npm install --platform=darwin --arch=x64 sharp --force
        
    - name: Setup Sharp (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        export npm_config_sharp_binary_host="https://github.com/lovell/sharp-libvips/releases/download/"
        export npm_config_sharp_ignore_global_libvips="true"
        npm install --platform=linux --arch=x64 sharp --force
        
    - name: Rebuild native modules
      run: |
        npm rebuild
        npx electron-builder install-app-deps --arch=x64
        
    - name: Verify electron installation
      run: npx electron --version
      
    - name: Build application (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $env:ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES="true"
        $env:npm_config_build_from_source="false"
        $env:npm_config_target_platform="win32"
        $env:npm_config_target_arch="x64"
        $env:npm_config_runtime="electron"
        $env:npm_config_devdir="$env:USERPROFILE\.electron-gyp"
        npm run build:win
      timeout-minutes: 45
      
    - name: Build application (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        export CSC_IDENTITY_AUTO_DISCOVERY=false
        export npm_config_build_from_source=false
        export npm_config_target_platform=darwin
        export npm_config_target_arch=x64
        export npm_config_runtime=electron
        npm run build:mac
      timeout-minutes: 45
      
    - name: Build application (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        export npm_config_build_from_source=false
        export npm_config_target_platform=linux
        export npm_config_target_arch=x64
        export npm_config_runtime=electron
        npm run build:linux
      timeout-minutes: 45
      
    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-builds
        path: |
          dist/*.exe
          dist/*.exe.blockmap
        retention-days: 7
        if-no-files-found: error
          
    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-builds
        path: |
          dist/*.dmg
          dist/*.dmg.blockmap
        retention-days: 7
        if-no-files-found: error
          
    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-builds
        path: |
          dist/*.AppImage
          dist/*.deb
        retention-days: 7
        if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Display structure
      run: |
        echo "Downloaded files structure:"
        find . -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" \) -ls
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          windows-builds/*
          macos-builds/*
          linux-builds/*
        name: Office Image Extractor ${{ github.ref_name }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        generate_release_notes: true
        fail_on_unmatched_files: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
